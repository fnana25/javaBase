分布式的优点：
   提提升了开发效率，代码根据业务拆分后更便于维护和扩展，提升系统性能。

分布式事务：
    强一致性：两阶段提交、三阶段提交
    最终一致性：
        1.可靠消息投递模式
        2.TCC
        3.补偿模式
第一种方案：可靠消息最终一致性，需要业务系统结合mq实现，在实现过程中需要保证消息的成功发送和消费，即需要业务系统控制mq的消息状态。
第二种方案：TCC,分为三个阶段trying-confirming-canceling。每个阶段做不同的处理。
           trying阶段主要是对业务系统进行检测及资源预留
           confirming阶段是做业务提交，通过trying阶段执行成功后，再执行该阶段，默认如果trying阶段执行成功，confirming就一定能成功
           canceling阶段是会对业务做回滚，在trying阶段中，如果存在分支事务trying失败，则需要调用canceling将已预留的资源释放
第三种方案：最大努力通知型，这种方案方案主要用在与第三方系统通讯时，比如：调用微信或支付宝支付后的结果通知，这种方案也是结合mq进行实现。
参考：https://www.jianshu.com/p/1156151e20c8
     http://www.codeceo.com/article/distributed-transaction.html
     极客时间：https://time.geekbang.org/dailylesson/detail/100044038?utm_source=geektime&utm_medium=chaping&utm_term=pc_interstitial

分布式id生成算法：
    1.uuid
    2.自增id（设置不同的起始值，设置步长，这种方法的缺点是当增加数据库机器时，不好调整）
    3.号段模式。一个独立的服务来产生id，服务每次从数据库获取一段id，缓存到内存中；
    4.雪花算法（保证每一台机器每一毫秒生成的id不一样）

幂等解决方法：https://time.geekbang.org/dailylesson/detail/100044036?utm_source=geektime&utm_medium=chaping&utm_term=pc_interstitial
    1.数据库唯一索引
    2.先select再update
    3.token机制
    4.分布式锁（锁的过期时间不小于业务的最大重试时间）
    5.状态机

seata:
    TC:全局事务协调者
    TM:全局事务管理者。每个本地事务向全局管理事务者注册事务id，每个事务属于一个全局事务，当本地事务执行成功时，向事务管理者提交本地事务
    RM:资源管理器，通过实现DataSource接口huo
    XID:事务id传递
rocketmq支持分布式事务
    首先发送一个事务消息到mq，当本地事务执行成功后，再把事务消息改成可消费的消息，其他事务就能消费该消息，继续执行了

分布式数据库：
   OceanBase是分布式关系数据库，蚂蚁金服国产商业数据库，非开源。
   分布式数据库的最终目标是要做到透明可扩展的数据库
   OceanBase采用Paxos+两阶段提交协议实现分布式事务

OceanBase 架构：
   多副本：一般分为3个集群（zone），每个集群由多个节点/服务器组成，拥有完整的一套数据
   全对等：每个节点拥有自己的sql引擎和存储引擎，各自管理不同的数据分区，完全对等
   无共享：每个节点不基于任何的共享结构
   数据分区：OceanBase数据结构的基本单元，是传统数据库的分区表在分布式数据库上的表现
   高可用+强一致性：多副本+Paxos协议保证数据写到3台机器中的两台
   OBProxy：百万级处理能力的代理，路由转发，轻量级sql解析，无状态

Tidb
   架构：分为计算层、存储层、元数据调度层，各层之间采用grpc通信
       计算层：主要为sql、mysql协议的兼容，sql执行计划的解析优化等，无状态，支持水平扩展。
       存储层：底层用rocksDB作为存储引擎，TiKV支持多副本，使用raft协议做复制，保证强一致性和容灾，应用层的sql由TiDb server转化为KV请求，最终写入到TiKV
       元数据调度层：集群管理模块，负责元数据管理，集群调度，负载均衡，分配全局唯一事务id，一般为奇数个节点（3）
   功能点：
        支持sql语法，基本的dml、ddl都支持
        在线ddl，更新表结构字段等不锁表，对业务无影响
        乐观锁机制，跟mysql的悲观锁机制不同
        支持分布式事务

时序数据库：OpenTSDB、KariosDB、Promethes（推荐）、influxDB（推荐）

Promethes：
    架构：主要分为数据采集模块、存储模块和查询模块
    采集模块：数据的采集主要采用pull模式，系统采用埋点然后暴露端点的方式；如果系统不能埋点则提供Exporters，服务发现可采用直接配置或者直接用组件consul
    告警组件：如果触发了告警就会发送告警消息到告警组件，进而通知运维人员
    查询模块：可视化的ui展示界面，如Grafana，或者直接通过api访问
    存储模块：默认按2小时一块的时间块存储，最新的时间块是存在内存中的，每次查询会定位和中和所有的时间块查询

系统监控方式：日志、调用链、Metrics、健康检查
   日志和调用链适合调试分析的场景；Metrics和健康检查适用于监控告警





































