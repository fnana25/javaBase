
1、跳跃表  https://www.jianshu.com/p/dc252b5efca6
    跳跃表是一种有序的数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的;
    如果我们想要提高其查找效率，可以考虑在链表上建索引的方式。每两个结点提取一个结点到上一级，我们把抽出来的那一级叫作索引。
    数据量很大的时候，可以提取多级索引；它是一种空间换时间的方案；
     Redis使用跳跃表作为有序集合键的底层实现之一,如果一个有序集合包含的元素数量比较多,又或者有序集合中元素的成员是比较长的字符串时, Redis就会使用跳跃表来作为有序集合健的底层实现。

2、项目中日志怎么设计的

3、Tcp和udp
      1.tcp基于连接,udp无连接
      2.TCP要求系统资源较多，UDP较少；
      3.UDP程序结构较简单
      4.流模式（TCP）与数据报模式(UDP);
      5.TCP保证数据正确性，UDP可能丢包
      6.TCP保证数据顺序，UDP不保证
4、类加载过程：
    加载
        1.通过一个类的全限定名来获取定义此类的二进制字节流
        2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
        3.在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口
    连接
        验证：确保被加载的类的正确性（文件格式验证、元数据验证、字节码验证、符号引用验证）
        准备：为类的静态变量分配内存，并将其赋默认值
        解析：将常量池中的符号引用替换为直接引用（内存地址）的过程
    初始化
        为类的静态变量赋初值

5、为什么双亲委派机制，以及缺陷，什么时候自定义类加载器
    优点：避免类的重复加载和基础类的篡改。
    缺陷：检查类是否加载的委派过程是单向的， 这个方式虽然从结构上说比较清晰，
       使各个 ClassLoader 的职责非常明确， 但是同时会带来一个问题， 即顶层的
       ClassLoader 无法访问底层的 ClassLoader 所加载的类
       通常情况下， 启动类加载器中的类为系统核心类， 包括一些重要的系统接口，
       而在应用类加载器中， 为应用类。 按照这种模式， 应用类访问系统类自然是没
       有问题， 但是系统类访问应用类就会出现问题。 比如在系统类中提供了一个接
       口， 该接口需要在应用类中得以实现， 该接口还绑定一个工厂方法， 用于创建该
       接口的实例， 而接口和工厂方法都在启动类加载器中。 这时， 就会出现该工厂方
       法无法创建由应用类加载器加载的应用实例。

6、快照读可以解决幻读，当前读，可以用行锁加间隙锁解决
7、单体应用缺点：
    开发效率低：所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断
    代码维护难：代码功能耦合在一起，新人不知道何从下手
    部署不灵活：构建时间长，任何小修改必须重新构建整个项目，这个过程往往很长
    稳定性不高：一个微不足道的小问题，可以导致整个应用挂掉
    扩展性不够：无法满足高并发情况下的业务需求

8、微服务的优点：组件化、松耦合、自治、去中心化
    微服务是松藕合的，无论是在开发阶段或部署阶段都是独立的。
    能够快速响应, 局部修改容易, 一个服务出现问题不会影响整个应用。
    易于和第三方应用系统集成, 支持使用不同的语言开发, 允许你利用融合最新技术。
    每个微服务都很小，足够内聚，足够小，代码容易理解。团队能够更关注自己的工作成果, 聚焦指定的业务功能或业务需求。
    开发简单、开发效率提高，一个服务可能就是专一的只干一件事, 能够被小团队单独开发，这个小团队可以是 2 到 5 人的开发人员组成。
缺点:
    微服务架构带来过多的运维操作, 可能需要团队具备一定的 DevOps 技巧.
    分布式系统可能复杂难以管理。因为分布部署跟踪问题难。当服务数量增加，管理复杂性增加。
9、mysql索引：主键索引、普通索引、唯一索引、组合索引、全文索引
注意点：
    1.索引不会包含有null值的列
    只要列中包含有null值都将不会被包含在索引中，复合索引中只要有一列含有null值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为null。
    2.使用短索引
    对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个char(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。
    3.索引列排序
    查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。
    4.like语句操作
    一般情况下不推荐使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。
    5.不要在列上进行运算
    这将导致索引失效而进行全表扫描

10、数据库优化：
    1.选择合适的字段类型和长度，够用且不浪费磁盘空间
    2.表太大时，选择横向或者纵向拆分
    3.创建索引
    4.使用连接（JOIN）来代替子查询
    5.尽量使用union all，union all只是合并查询结果，并不会进行去重和排序操作
11、怎样避免重复消费消息：消费端做好幂等

12、rabbitmq怎样避免消息丢失：
    发送消息采用confirm模式；
    rabbitmq持久化消息；
    关闭自动ack，改为手动ack


13、oauth2为什么要通过两次请求才返回token，第一次返回code,第二次返回token。
14、长连接 websocket 在服务器大概占用多少内存。
15、final ，为什么内部类和匿名内部类的变量必须是final修饰的
16、什么时候适合用公平锁什么时候适合用抢占；抢占锁和公平锁哪个效率高；分布式锁怎么实现可重入锁；死锁的一种场景:饿锁（线程的优先级比较低，一直获取不到锁），怎么解决
17、分布式定时任务方案的实现

18、java 序列化的作用，serialVersionUID号有何用?
    持久化存储到磁盘，便于网络运输和传播
    序列化：把Java对象转换为字节序列。
    反序列化：把字节序列恢复为原先的Java对象。
    serialVersionUID是序列化前后的唯一标识符
    如果没有人为显式定义过serialVersionUID，那编译器会为它自动声明一个

19、mvcc解决什么问题
   解决读写冲突的无锁并发控制，避免了脏读、不可重复读和幻读

有哪些表锁和行锁  https://blog.csdn.net/cy973071263/article/details/105188519
    一、按照对数据操作的锁粒度来分：行级锁、表级锁、页级锁、间隙锁
    二、按照锁的共享策略来分：共享锁、排他锁、意向共享锁、意向排他锁
    三、从加锁策略上分：乐观锁和悲观锁
    InnoDB有三种行锁的算法：
    1，Record Lock（记录锁）：单个行记录上的锁。这个也是我们日常认为的行锁。
    2，Gap Lock（间隙锁）：间隙锁，锁定一个范围，但不包括记录本身（只不过它的锁粒度比记录锁的锁整行更大一些，他是锁住了某个范围内的多个行，包括根本不存在的数据）。GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。该锁只会在隔离级别是RR或者以上的级别内存在。间隙锁的目的是为了让其他事务无法在间隙中新增数据。
    3，Next-Key Lock（临键锁）：它是记录锁和间隙锁的结合，锁定一个范围，并且锁定记录本身。对于行的查询，都是采用该方法，主要目的是解决幻读的问题。next-key锁是InnoDB默认的锁
next-key lock的效果相当于一个记录锁加一个间隙锁。当next-key lock加在某索引上，则该记录和它前面的区间都被锁定。
假设有记录1, 3, 5, 7，现在记录5上加next-key lock，则会锁定区间(3, 5]，任何试图插入到这个区间的记录都会阻塞。

innodb的意向锁有什么作用
   分为意向共享锁和意向排他锁，在事务申请行锁之前先申请意向锁，意向锁之间都不会发生冲突。
   当其他事务申请表锁或者行锁时就不必每行数据逐个判断是否有行锁存在，提高效率

zset底层数据结构
 zipList：
     键值对数量少于128个；
     每个元素的长度小于64字节；
 skipList：
    不满足以上两个条件时使用跳表、组合了hash和skipList

redis底层有哪些数据结构

bitmap(位图)使用场景：
    用户在线状态，用户签到，统计活跃用户，布隆过滤器


钉钉消息如何实现已读未读 ： 用bitmap

数据库死锁怎么排查

为什么要序列化，范型的作用，反射的几种方式

早绑定晚绑定

延迟队列，商品活动前5分钟通知100万用户

已读未读场景，位图

G1垃圾回收器特点，卡表

Forkjoin

更新一条数据会加哪些锁，加锁的顺序是什么

有哪些方法可以减少回表次数，加索引会锁表吗，在一个数据量比较小的表加一个字段很慢会是什么原因，MySQL 的MRR参数了解吗

死锁的cpu占有率是100%还是0%

jdk动态代理和cglib动态代理哪个性能高，jvmit了解吗

红包雨架构怎么实现？领域模型设计的理解

Spring的aop代理类在容器启动时加加载了

Dubbo惊群效应，当服务中有一个线程正在执行时，怎么把服务平滑的注册到注册中心去

Dubbo的高效提现在哪些方面，怎么做到高效的

零拷贝, redis和netty的线程模型区别





