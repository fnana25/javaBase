dubbo定义：
    dubbo是一款高性能、轻量级的开源RPC框架，它提供了三大核心能力：
        1.面向接口的远程方法调用；
        2.智能容错和负载均衡；
        3.服务注册和发现
    使用dubbo的好处：
        可以将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，可用于提高业务复用，灵活扩展，使前端应用能更快速的响应多变的市场需求。
RPC(远程过程调用)：解决不同服务之间的调用问题，它一般会包含有传输协议和序列化协议
1.服务消费方以本地调用方式调用服务；
2.client stub接收到调用后将方法、参数等组装成能够进行网络传输的消息体；
3.client stub找到服务地址，并将消息发送到服务端；
4.server stub收到消息后进行解码；
5.server stub根据解码结果调用本地服务；
6.本地服务执行并将结果返回给server stub；
7.server stub将返回结果打包成消息并发送给消费方；
8.client stub接收到消息并进行解码；
9.服务消费方得到最终结果

dubbo服务调用过程的描述：
1.服务容器负责启动、加载、运行服务提供者；
2.服务提供者在启动时，向注册中心注册自己提供的服务；
3.服务消费者在启动时，向注册中心订阅自己所需的服务；
4.注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者；
5.服务消费者，从提供者地址列表中，基于负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台；
6.服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心

dubbo架构：
第一层：server层，接口层，给服务提供者和消费者来实现的；
第二层：config层，配置层，主要是对dubbo进行各种配置的；
第三层：proxy层，服务接口透明代理，生成服务的客户端stub和服务端的skeleton；
第四层：registry层，服务注册层，服务服务的注册和发现；
第五层：cluster层，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务；
第六层：monitor层，监控层，对rpc接口的调用次数和调用时间进行监控；
第七层：protocol层，远程调用层，封装rpc调用；
第八层：exchange层，信息交换层，封装请求响应模式，同步转异步；
第九层：transport层，网络传输层，抽象mina和netty为统一接口；
第十层：serialize层，数据序列化层，网络传输需要

dubbo的负载均衡策略：
1.Random LoadBalance （默认，基于权重的随机负载均衡机制）
2.RoundRobin LoadBalance  （不推荐，基于权重的轮询负载均衡机制）
3.LeastActive LoadBalance  （最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差）
4.ConsistentHash LoadBalance  （一致性哈希，相同参数的请求总是发到同一个提供者）
